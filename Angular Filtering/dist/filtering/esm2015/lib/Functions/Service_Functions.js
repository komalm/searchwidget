export function UpdateConfig({ apiData, addtionalFilterConfig, filterConfig, }) {
    let TempData = apiData;
    if ((filterConfig === null || filterConfig === void 0 ? void 0 : filterConfig.length) !== 0) {
        filterConfig === null || filterConfig === void 0 ? void 0 : filterConfig.map((item) => {
            const ItemName = item.name;
            const ItemField = item.field;
            const ItemIsEnabled = item.isEnabled !== undefined ? item.isEnabled : true;
            TempData[0].data.PrimaryFields[ItemName] = {
                field: ItemField,
                isEnabled: ItemIsEnabled,
            };
        });
    }
    if ((addtionalFilterConfig === null || addtionalFilterConfig === void 0 ? void 0 : addtionalFilterConfig.length) !== 0) {
        addtionalFilterConfig === null || addtionalFilterConfig === void 0 ? void 0 : addtionalFilterConfig.map((item) => {
            const ItemName = item.name;
            const ItemField = item.field;
            const ItemIsEnabled = item.isEnabled !== undefined ? item.isEnabled : true;
            TempData[0].data.additionalFields[ItemName] = {
                displayName: ItemName,
                field: ItemField,
                isEnabled: ItemIsEnabled,
            };
        });
    }
    // setFilterConfig(TempData);
    return TempData;
}
function isEnabled(filterConfig, itemName) {
    let isEnable = true;
    const Keys = Object.keys(filterConfig);
    Keys.map((item) => {
        if (item.toLowerCase() === itemName.toLowerCase()) {
            isEnable = filterConfig[item].isEnabled;
        }
    });
    return isEnable;
}
export function FilterDataExtract({ content, filterConfig, TermsObject, }) {
    var _a, _b;
    const AddtionalFieldsObject = (_a = filterConfig[0]) === null || _a === void 0 ? void 0 : _a.data.additionalFields;
    const FilterConfigObject = Object.assign({}, AddtionalFieldsObject);
    let OptionNameArray = [];
    let OptionValueArray = [];
    if (filterConfig.length !== 0) {
        const AddtionalKeys = Object.keys((_b = filterConfig[0]) === null || _b === void 0 ? void 0 : _b.data.additionalFields);
        OptionNameArray = [...AddtionalKeys];
        OptionNameArray === null || OptionNameArray === void 0 ? void 0 : OptionNameArray.map((item) => {
            var _a;
            if (isEnabled(FilterConfigObject, item)) {
                let temp;
                if (TermsObject.hasOwnProperty(item)) {
                    temp = TermsObject[item];
                }
                else {
                    let fieldName = (_a = AddtionalFieldsObject[item]) === null || _a === void 0 ? void 0 : _a.field;
                    temp = new Set('');
                    if (fieldName !== null || fieldName !== undefined) {
                        content.map((item) => {
                            if (item[fieldName] !== null || item[fieldName] !== undefined) {
                                if (Array.isArray(item[fieldName])) {
                                    item[fieldName].map((ele) => {
                                        temp.add(ele);
                                    });
                                }
                                else {
                                    temp.add(item[fieldName]);
                                }
                            }
                        });
                    }
                }
                if (Array.isArray(temp)) {
                    if (temp.length !== 0)
                        OptionValueArray.push({
                            name: item,
                            terms: temp.sort(),
                        });
                }
                else {
                    const val = Array.from(temp);
                    val.splice(val.length - 1, 1);
                    if (val.length !== 0)
                        OptionValueArray.push({
                            name: item,
                            terms: val.sort(),
                        });
                }
            }
        });
    }
    return {
        OptionNameArray,
        OptionValueArray,
    };
}
export function RenderContentFunction({ content, filtersSelected, filterConfig, }) {
    var _a;
    const AddtionalFieldsObject = (_a = filterConfig[0]) === null || _a === void 0 ? void 0 : _a.data.additionalFields;
    const FilterConfigObject = Object.assign({}, AddtionalFieldsObject);
    const keys = Object.keys(FilterConfigObject);
    let contentArray = [];
    const tempContent = content;
    filtersSelected === null || filtersSelected === void 0 ? void 0 : filtersSelected.map((item) => {
        const itemName = item.name;
        const filterSelectedArray = item.value;
        const fieldKey = keys.filter((item) => {
            return item.toLowerCase() === (itemName === null || itemName === void 0 ? void 0 : itemName.toLowerCase());
        });
        const fieldObj = FilterConfigObject[fieldKey[0]];
        const field = fieldObj === null || fieldObj === void 0 ? void 0 : fieldObj.field;
        tempContent === null || tempContent === void 0 ? void 0 : tempContent.map((item) => {
            if (item[field] !== undefined) {
                filterSelectedArray.map((ele) => {
                    if (item[field].includes(ele)) {
                        contentArray.push(item);
                    }
                });
            }
        });
    });
    return contentArray;
}
function isArray(item) {
    if (Array.isArray(item)) {
        return item[0];
    }
    else {
        return item;
    }
}
export function CardFieldsRender(item, CardFieldsObject) {
    const FieldKeys = Object.keys(CardFieldsObject);
    let ObjectReturn = {};
    let tagsArray = [];
    FieldKeys.map((Field) => {
        if (item.hasOwnProperty(CardFieldsObject[Field].field)) {
            ObjectReturn[Field] = isArray(item[CardFieldsObject[Field].field]);
        }
        if (Field === 'tags') {
            const TagsFieldsArray = CardFieldsObject[Field].TagsFieldArray;
            TagsFieldsArray.map((tagField) => {
                if (item.hasOwnProperty(tagField))
                    tagsArray.push(isArray(item[tagField]));
            });
        }
    });
    ObjectReturn['tags'] = tagsArray;
    return ObjectReturn;
}
export function TermsFetch(data, 
// setMasterFieldsTerms: Function,
FilterConfig) {
    const Categories = data.result.framework.categories;
    const TermsObject = {};
    Categories.map((item) => {
        var _a;
        const name = item.name;
        if ((_a = FilterConfig[0].data.PrimaryFields[name]) === null || _a === void 0 ? void 0 : _a.isEnabled) {
            const associations = item.terms[0].associations
                ? item.terms[0].associations
                : item.terms;
            associations.map((item) => {
                if (TermsObject.hasOwnProperty(item.category)) {
                    let tempArr = TermsObject[item.category].terms;
                    tempArr.push(item.name);
                    const newSet = new Set(tempArr);
                    TermsObject[item.category].terms = Array.from(newSet);
                }
                else {
                    TermsObject[item.category] = {
                        name: item.category,
                        terms: [item.name],
                    };
                }
            });
        }
    });
    return [TermsObject];
}
export function MasterFieldContentChange(filtersArray, filterConfig, body) {
    const bodyJSON = JSON.parse(body);
    const TempObj = {};
    filtersArray.map((item) => {
        var _a;
        const itemName = item.name.toLowerCase();
        const configfiled = filterConfig.filter((fil) => {
            return fil.name.toLowerCase() === itemName;
        });
        TempObj[(_a = configfiled[0]) === null || _a === void 0 ? void 0 : _a.field] = item.value;
    });
    const keys = Object.keys(bodyJSON.request.filters);
    keys.map((item) => {
        if (TempObj[item] !== undefined) {
            bodyJSON.request.filters[item] = TempObj[item];
        }
    });
    return JSON.stringify(bodyJSON);
}
export function DependentTermsFetch(thing, filters, filterOptions) {
    var _a;
    let obj = {};
    (_a = thing.result.framework.categories) === null || _a === void 0 ? void 0 : _a.map((item) => {
        filters === null || filters === void 0 ? void 0 : filters.map((filter) => {
            if (item.code.toLowerCase() === filter.name.toLowerCase()) {
                const arr = filter.value;
                item.terms.map((item) => {
                    if (arr.includes(item.name)) {
                        item.associations.map((item) => {
                            if (obj[item.category] === undefined) {
                                obj[item.category] = [item.name];
                            }
                            else {
                                // Concatenate the existing values with the new item's name
                                const concatenatedValues = obj[item.category].concat(item.name);
                                // Convert the concatenated values into a Set to remove duplicates
                                const uniqueValuesSet = new Set(concatenatedValues);
                                // Convert the Set back into an array using Array.from()
                                const uniqueValuesArray = Array.from(uniqueValuesSet);
                                obj[item.category] = uniqueValuesArray.sort();
                            }
                        });
                    }
                });
            }
        });
    });
    const Keys = Object.keys(filterOptions[0]);
    Keys.map((item) => {
        if (obj.hasOwnProperty(item)) {
            filterOptions[0][item].terms = obj[item];
        }
    });
    return filterOptions;
}
export function FrameworksOptionsRender(Frameworks) {
    let options = [];
    Frameworks === null || Frameworks === void 0 ? void 0 : Frameworks.map((item) => {
        options.push(item.name);
    });
    return options;
}
export function GetFrameWorkID(Frameworks, Framework) {
    let id = '';
    Frameworks === null || Frameworks === void 0 ? void 0 : Frameworks.map((item) => {
        if (item.name === Framework) {
            id = item.identifier;
        }
    });
    return id;
}
//# sourceMappingURL=data:application/json;base64,